#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <Adafruit_NeoPixel.h>

// ---- WiFi & Weather API Settings ----
const char* ssid            = "YOUR_SSID";
const char* password        = "YOUR_PASSWORD";
const char* weatherApiKey   = "YOUR_OPENWEATHERMAP_API_KEY";
const char* city            = "YOUR_CITY";         // e.g., "Vienna"
const char* countryCode     = "YOUR_COUNTRY_CODE"; // e.g., "at"
const unsigned long updateInterval = 10 * 60 * 1000; // Update every 10 minutes

// ---- NeoPixel Setup ----
#define SUN_PIN      5
#define NUM_SUN_LEDS 4
Adafruit_NeoPixel sunStrip(NUM_SUN_LEDS, SUN_PIN, NEO_GRB + NEO_KHZ800);

#define CLOUD_PIN      6
#define NUM_CLOUD_LEDS 5
Adafruit_NeoPixel cloudStrip(NUM_CLOUD_LEDS, CLOUD_PIN, NEO_GRB + NEO_KHZ800);

// ---- TTP223 Touch Sensor Setup ----
#define TOUCH_PIN    9  // GPIO pin connected to TTP223 IO
bool ledsEnabled = true; // Toggle to turn LEDs on/off
bool lastTouchState = LOW; // Store the last touch state for debouncing

// ---- Global Variables ----
unsigned long lastUpdate = 0;
unsigned long lastThunder = 0; // Used only when in "thunder" state
String currentState = "";      // Can be: "clear", "clear+cloud", "cloud", "thunder"

// ---- Forward Declarations ----
void updateWeather();
void updateLEDs();
void ensureWiFiConnected();
void clearLEDs();
void showSunny();            // Flickering sun effect (4 LEDs)
void showCloudy();           // Steady cloud effect (5 LEDs)
void showLightningCloud();   // Thunder effect (lightning flashes on cloud strip)

void setup() {
  Serial.begin(115200);
  delay(1000);

  // Start WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" connected.");

  // Initialize LED strips
  sunStrip.begin();
  sunStrip.show();   // All sun LEDs off
  cloudStrip.begin();
  cloudStrip.show(); // All cloud LEDs off

  // Initialize TTP223 touch sensor
  pinMode(TOUCH_PIN, INPUT);

  // Do an initial weather update
  updateWeather();
  lastUpdate = millis();
  lastThunder = millis();
}

void loop() {
  ensureWiFiConnected();

  // Update weather periodically
  if (millis() - lastUpdate >= updateInterval) {
    updateWeather();
    lastUpdate = millis();
  }

  // Check TTP223 touch sensor
  bool touchState = digitalRead(TOUCH_PIN);
  if (touchState == HIGH && lastTouchState == LOW) {
    // Toggle LED state on touch
    ledsEnabled = !ledsEnabled;
    Serial.println(ledsEnabled ? "LEDs ON" : "LEDs OFF");
    if (!ledsEnabled) {
      clearLEDs(); // Turn off all LEDs if disabled
    }
    delay(500); // Debounce delay
  }
  lastTouchState = touchState;

  // Refresh LED display based on the current state (if LEDs are enabled)
  if (ledsEnabled) {
    updateLEDs();
  }

  delay(100); // Loop delay (adjust as needed)
}

// ---- LED Display Refresh ----
void updateLEDs() {
  if (currentState == "clear") {
    showSunny();
  }
  else if (currentState == "clear+cloud") {
    showSunny();
    showCloudy();
  }
  else if (currentState == "cloud") {
    showCloudy();
  }
  else if (currentState == "thunder") {
    if (millis() - lastThunder >= 30000) {
      showLightningCloud();
      lastThunder = millis();
    }
    else {
      showCloudy();
    }
  }
}

// ---- WiFi Reconnection ----
void ensureWiFiConnected() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi lost. Attempting to reconnect...");
    WiFi.disconnect();
    WiFi.begin(ssid, password);
    unsigned long startAttemptTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
      delay(500);
      Serial.print(".");
    }
    Serial.println();
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("Reconnected to WiFi.");
    } else {
      Serial.println("Failed to reconnect.");
    }
  }
}

// ---- Weather Update Function ----
void updateWeather() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = "http://api.openweathermap.org/data/2.5/weather?q=" 
                 + String(city) + "," + String(countryCode)
                 + "&appid=" + String(weatherApiKey)
                 + "&units=metric";
    Serial.println("Requesting weather data from:");
    Serial.println(url);

    http.begin(url);
    int httpCode = http.GET();
    if (httpCode > 0 && httpCode == HTTP_CODE_OK) {
      String payload = http.getString();
      Serial.println("Received payload:");
      Serial.println(payload);

      DynamicJsonDocument doc(2048);
      DeserializationError error = deserializeJson(doc, payload);
      if (!error) {
        const char* descCond = doc["weather"][0]["description"];
        String descStr = String(descCond);
        descStr.toLowerCase();
        Serial.print("Weather description: ");
        Serial.println(descStr);

        String newState = "";
        if (descStr == "clear sky") {
          newState = "clear";
        }
        else if (descStr == "few clouds" || descStr == "scattered clouds") {
          newState = "clear+cloud";
        }
        else if (descStr == "broken clouds" || descStr == "overcast clouds" ||
                 descStr == "mist" || descStr == "haze" || descStr == "fog") {
          newState = "cloud";
        }
        else {
          newState = "thunder";
        }
        
        Serial.print("New state: ");
        Serial.println(newState);
        
        if (newState != currentState) {
          Serial.println("Weather state changed, updating LED display.");
          currentState = newState;
          clearLEDs();
          updateLEDs();
          if (currentState == "thunder") {
            lastThunder = millis();
          }
        }
        else {
          Serial.println("Weather state unchanged.");
        }
      }
      else {
        Serial.print("JSON Parsing failed: ");
        Serial.println(error.f_str());
      }
    }
    else {
      Serial.print("HTTP GET failed: ");
      Serial.println(http.errorToString(httpCode));
    }
    http.end();
  }
}

// ---- LED Control Functions ----
void showSunny() {
  float brightness = random(85, 101) / 100.0;
  uint8_t r = (uint8_t)(255 * brightness);
  uint8_t g = (uint8_t)(165 * brightness);
  uint8_t b = 0;
  for (int i = 0; i < NUM_SUN_LEDS; i++) {
    sunStrip.setPixelColor(i, sunStrip.Color(r, g, b));
  }
  sunStrip.show();
}

void showCloudy() {
  uint32_t color = cloudStrip.Color(150, 150, 150);
  for (int i = 0; i < NUM_CLOUD_LEDS; i++) {
    cloudStrip.setPixelColor(i, color);
  }
  cloudStrip.show();
}

void showLightningCloud() {
  const int flashes = 3;
  for (int i = 0; i < flashes; i++) {
    for (int j = 0; j < NUM_CLOUD_LEDS; j++) {
      cloudStrip.setPixelColor(j, cloudStrip.Color(255, 255, 255));
    }
    cloudStrip.show();
    delay(random(50, 150));
    for (int j = 0; j < NUM_CLOUD_LEDS; j++) {
      cloudStrip.setPixelColor(j, 0);
    }
    cloudStrip.show();
    delay(random(50, 150));
  }
  showCloudy();
}

void clearLEDs() {
  for (int i = 0; i < NUM_SUN_LEDS; i++) {
    sunStrip.setPixelColor(i, 0);
  }
  sunStrip.show();
  for (int i = 0; i < NUM_CLOUD_LEDS; i++) {
    cloudStrip.setPixelColor(i, 0);
  }
  cloudStrip.show();
}
