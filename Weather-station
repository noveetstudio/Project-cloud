#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <Adafruit_NeoPixel.h>

// ---- WiFi & Weather API Settings ----
const char* ssid            = "YOUR_SSID";
const char* password        = "YOUR_PASSWORD";
const char* weatherApiKey   = "YOUR_OPENWEATHERMAP_API_KEY";
const char* city            = "YOUR_CITY";         // e.g., "London"
const char* countryCode     = "YOUR_COUNTRY_CODE"; // e.g., "uk"
const unsigned long updateInterval = 10 * 60 * 1000; // Update every 10 minutes

// ---- NeoPixel Setup ----
// Sun strip: 4 LEDs on pin 5
#define SUN_PIN     5
#define NUM_SUN_LEDS 4
Adafruit_NeoPixel sunStrip(NUM_SUN_LEDS, SUN_PIN, NEO_GRB + NEO_KHZ800);

// Cloud strip: 5 LEDs on pin 6
#define CLOUD_PIN     6
#define NUM_CLOUD_LEDS 5
Adafruit_NeoPixel cloudStrip(NUM_CLOUD_LEDS, CLOUD_PIN, NEO_GRB + NEO_KHZ800);

// ---- Global Variables ----
unsigned long lastUpdate = 0;
String lastCondition = ""; // Stores the last received weather condition

void setup() {
  Serial.begin(115200);
  delay(1000);

  // Start WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" connected.");

  // Initialize LED strips
  sunStrip.begin();
  sunStrip.show();   // Ensure all sun LEDs are off
  cloudStrip.begin();
  cloudStrip.show(); // Ensure all cloud LEDs are off

  // Do an initial weather update
  updateWeather();
  lastUpdate = millis();
}

void loop() {
  // Check WiFi connection periodically and reconnect if lost
  ensureWiFiConnected();

  // Update weather data only after the update interval
  if (millis() - lastUpdate >= updateInterval) {
    updateWeather();
    lastUpdate = millis();
  }
  delay(1000); // Small delay to avoid hogging the loop
}

// ---- Function to ensure WiFi remains connected ----
void ensureWiFiConnected() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi lost. Attempting to reconnect...");
    WiFi.disconnect();
    WiFi.begin(ssid, password);
    unsigned long startAttemptTime = millis();
    // Attempt reconnect for 10 seconds
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
      delay(500);
      Serial.print(".");
    }
    Serial.println();
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("Reconnected to WiFi.");
    } else {
      Serial.println("Failed to reconnect.");
    }
  }
}

// ---- Function to update weather and control LEDs ----
void updateWeather() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = "http://api.openweathermap.org/data/2.5/weather?q=" 
                + String(city) + "," + String(countryCode)
                + "&appid=" + String(weatherApiKey) 
                + "&units=metric";
    Serial.println("Requesting weather data from:");
    Serial.println(url);

    http.begin(url);
    int httpCode = http.GET();
    if (httpCode > 0) { // Successful connection?
      if (httpCode == HTTP_CODE_OK) {
        String payload = http.getString();
        Serial.println("Received payload:");
        Serial.println(payload);

        DynamicJsonDocument doc(1024);
        DeserializationError error = deserializeJson(doc, payload);
        if (!error) {
          const char* condition = doc["weather"][0]["main"];
          String newCondition = String(condition);
          newCondition.toLowerCase();
          Serial.print("Weather condition: ");
          Serial.println(newCondition);

          // Only update LEDs if the condition has changed
          if (newCondition != lastCondition) {
            lastCondition = newCondition;
            clearLEDs();

            // Determine LED behavior based on the weather condition:
            if (newCondition == "clear") {
              showSunny();
            }
            else if (newCondition == "clouds") {
              showCloudy();
            }
            else if (newCondition == "rain" || newCondition == "thunderstorm" ||
                     newCondition == "snow" || newCondition == "drizzle" ||
                     newCondition == "hail" || newCondition == "bizzard") {
              showLightningCloud();
            }
            else if (newCondition.indexOf("clear") >= 0 && newCondition.indexOf("cloud") >= 0) {
              // If both sunny and cloudy are indicated
              showSunny();
              showCloudy();
            }
            else {
              // Fallback for any other conditions: light cloud strip with a neutral tone
              showCloudy();
            }
          }
          else {
            Serial.println("Weather condition unchanged. No LED update.");
          }
        }
        else {
          Serial.print("JSON Parsing failed: ");
          Serial.println(error.f_str());
        }
      }
    }
    else {
      Serial.print("HTTP GET failed: ");
      Serial.println(http.errorToString(httpCode));
    }
    http.end();
  }
}

// ---- LED Control Functions ----

// Show sunny: light the sun strip with warm yellow
void showSunny() {
  uint32_t color = sunStrip.Color(255, 200, 50); // Warm yellow
  for (int i = 0; i < NUM_SUN_LEDS; i++) {
    sunStrip.setPixelColor(i, color);
  }
  sunStrip.show();
}

// Show cloudy: light the cloud strip with soft gray
void showCloudy() {
  uint32_t color = cloudStrip.Color(150, 150, 150); // Soft gray
  for (int i = 0; i < NUM_CLOUD_LEDS; i++) {
    cloudStrip.setPixelColor(i, color);
  }
  cloudStrip.show();
}

// Show lightning effect on cloud strip (for rain, thunder, snow, etc.)
void showLightningCloud() {
  const int flashes = 3;
  for (int i = 0; i < flashes; i++) {
    // Flash all cloud LEDs bright white
    for (int j = 0; j < NUM_CLOUD_LEDS; j++) {
      cloudStrip.setPixelColor(j, cloudStrip.Color(255, 255, 255));
    }
    cloudStrip.show();
    delay(random(50, 150));

    // Turn off cloud LEDs
    for (int j = 0; j < NUM_CLOUD_LEDS; j++) {
      cloudStrip.setPixelColor(j, 0);
    }
    cloudStrip.show();
    delay(random(50, 150));
  }
  // After flashing, leave them with a subdued cloudy color
  showCloudy();
}

// Clear both LED strips
void clearLEDs() {
  for (int i = 0; i < NUM_SUN_LEDS; i++) {
    sunStrip.setPixelColor(i, 0);
  }
  sunStrip.show();

  for (int i = 0; i < NUM_CLOUD_LEDS; i++) {
    cloudStrip.setPixelColor(i, 0);
  }
  cloudStrip.show();
}
